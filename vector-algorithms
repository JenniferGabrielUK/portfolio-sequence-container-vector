// portfolio-sequence-container-vector.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <iterator>

class Person {
	//default constructor
	//friend overloaded insertion operator expecting Person class
	//overloaded less than operator
	//overloaded == operator
	//variables std::string name, int age
private:
	friend std::ostream& operator<< (std::ostream& os, const Person& p);
	std::string name{};
	int age{};
public:
	Person() = default; //default constructor
	Person(std::string name, int age) : name{ name }, age{ age = 0 } {std::cout << "Two arguement constructor being called." << std::endl; }
	bool operator< (const Person& rhs) { return this->age < rhs.age; }
	bool operator== (const Person& rhs) { return this->name == rhs.name && this->age == rhs.age; }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
	os << "\n[ " << p.name << " : " << p.age << "]" << std::endl;
	return os;
}


void display2(const std::vector<int>& vec) {
	if (vec.size() == 0) {
		std::cout << "Vector is empty." << std::endl;
	} else {
		std::cout << "[ ";
		std::for_each(vec.begin(), vec.end(),
			[](int x) {std::cout << x << " "; }); //same effect as a rn%aged based for loop
		std::cout << "]" << std::endl;
	}
}

template <typename T>
void display(const std::vector <T>& vec) {
	if (vec.size() == 0) {
		std::cout << "Vector is empty." << std::endl;
	} else {
		std::cout << "[";
		for (auto& elem : vec)
			std::cout << elem << " ";
		std::cout << "]" << std::endl;
	}
}

void test1() {
	std::cout << "Test1=====================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5,6,7,8,9,10 };
	display(vec);
	vec = { 2,3,4,5,6 };
	display(vec);
	std::vector<int> vec1(10, 100); //ten 100s in the vector using () instead of {}
	display(vec1);
	std::vector <std::string> vec2{ "Jenny", "Elizabeth", "Gabriel"};
	display(vec2);
	std::for_each(vec1.begin(), vec1.end(), [](int &x) { x = 1000; }); //x by reference in the lambda allows the integer to be changed
	display(vec1);
}

void test2() {
	std::cout << "\nTest2====================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5 };
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
	vec.push_back(6);
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
	vec.shrink_to_fit();
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
	vec.push_back(7);
	vec.push_back(8);
	vec.push_back(9);
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
	vec.reserve(100); //reserve the capacity of the vector to 100
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
}

void test3() {
	std::cout << "\nTest3===================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5 };
	display(vec);
	vec[0] = 100;
	display(vec);
	vec[1] = 200;
	display(vec);
	vec[2] = 300;
	display(vec);
	vec[3] = 400;
	display(vec);
	vec[4] = 500;
	display(vec);
	vec.shrink_to_fit();
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
	vec.at(0) = 1000;
	display(vec);
	vec.at(1) = 2000;
	display(vec);
	vec.at(2) = 3000;
	display(vec);
	vec.at(3) = 4000;
	display(vec);
	vec.at(4) = 5000;
	display(vec);
	std::cout << "\nVec size: " << vec.size() << std::endl;
	std::cout << "\nVec max size: " << vec.max_size() << std::endl;
	std::cout << "\nVec capacity: " << vec.capacity() << std::endl << std::endl;
}

void test4() {
	std::cout << "\nTest5=====================" << std::endl;
	std::vector <Person> accounts;
	Person p1{ "Jennifer", 18 };
	display(accounts);
	accounts.push_back(p1);
	display(accounts);
	Person p2{ "Elizabeth Gabriel", 27 };
	accounts.push_back(p2);
	display(accounts);
	accounts.push_back(Person{ "Sam Wise", 38 });
	display(accounts);
	accounts.push_back(Person{ "Frodo", 32 });
	display(accounts);
	accounts.push_back(Person{ "Gimli" });	//uses default age.
	display(accounts);
	accounts.emplace_back("Gandalf the Grey", 432); //uses emplace_back constructing the relevant class for te vector involved.
	display(accounts);
	accounts.emplace_back("Gandalf the White"); //uses default age.
	display(accounts);
	std::cout << "Vec size: " << accounts.size() << std::endl;
	std::cout << "Capacity: " << accounts.capacity() << std::endl;	
	accounts.shrink_to_fit();
	std::cout << "Vec size after shrink_to_fit: " << accounts.size() << std::endl;
}

void test5() {
	std::cout << "\nTest5======================" << std::endl;
	std::vector<Person> accounts{
		{"Jenny", 21},
		{"Elizabeth", 33},
		{"Gabriel"}
	};
	display(accounts);
	accounts.push_back(Person{"Jennifer"});
	display(accounts);
	std::cout << "The front of the vector contains the account: " << accounts.front() << std::endl;
	std::cout << "The back of the vector contains the account: " << accounts.back() << std::endl;
	accounts.pop_back();
	display(accounts);
	std::cout << "The front of the vector contains the account: " << accounts.front() << std::endl;
	std::cout << "The back of the vector contains the account: " << accounts.back() << std::endl;
	accounts.pop_back();
	display(accounts);
	std::cout << "The front of the vector contains the account: " << accounts.front() << std::endl;
	std::cout << "The back of the vector contains the account: " << accounts.back() << std::endl;
}

void test6() {
	std::cout << "\nTest5======================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5 };
	display(vec);
	vec.clear(); //remove all elements
	display(vec);
	vec = { 1,2,3,4,5,6,7,8,9,10 };
	display(vec);
	std::cout << "Vector size: " << vec.size() << std::endl;
	std::cout << "The front of the vector contains: " << vec.front() << std::endl;

	vec.erase(vec.begin(), vec.begin() + 2);
	display(vec);
	std::cout << "Vector size: " << vec.size() << std::endl;
	vec.erase(vec.begin(), vec.begin() + 3); 
	display(vec);
	std::cout << "Vector size: " << vec.size() << std::endl;
	std::cout << "The front of the vector contains: " << vec.front() << std::endl;
	std::vector <int> vec1 = { 1,2,3,4,5,6,7,8,9,10 };
	//erase all even numbers using while loop and iterator
	//std::vector<int>::iterator it = vec1.begin();
	auto it = vec1.begin();
	while (it != vec1.end()) {
		if (*it % 2 == 0)
			vec1.erase(it);
		else
			it++;
	}
	display(vec1);
}

void test7() {
	std::cout << "\nTest7=======================" << std::endl;
	std::vector<int> vec1{ 1,2,3,4,5 };
	std::vector<int> vec2{ 1,2,3,4,5,6,7,8,9,10 };
	std::vector<int> vec3{ 10,20,30,40,50,60,70,80,90,100 };
	display(vec1);
	display(vec2);
	display(vec3);
	std::cout << "Swap function being called." << std::endl;
	vec2.swap(vec1);
	display(vec1);
	display(vec2);
	std::cout << "Swap function being called." << std::endl;
	vec3.swap(vec2);
	display(vec1);
	display(vec2);
	display(vec3);
	std::cout << "Swap function being called." << std::endl;
	vec1.swap(vec2);
	display(vec1);
	display(vec2);
	display(vec3);
}

void test8() {
	std::cout << "\nTest8=======================" << std::endl;
	std::vector <int> vec1{ 1,21,3,40,12 };
	std::vector <std::string> vec2{ "Jenny-Jennifer", "Elizabeth", "Gabriel", "Gandalf", "Frodo" };
	display(vec1);
	std::cout << "Sort being called." << std::endl;
	std::sort(vec1.begin(), vec1.end());
	display(vec1);
	display(vec2);
	std::cout << "Sort being called." << std::endl;
	std::sort(vec2.begin(), vec2.end());
	display(vec2);
}

void test9() {
	std::cout << "\nTest9=======================" << std::endl;
	//std::back_inserter constructs a back-inserted iterator that inserts
	//new elements, at the end of the continer it's applied to.
	std::vector <int> vec1 { 1,2,3,4,5 };
	std::vector <int> vec2{ 10,20 };
	display(vec1);
	display(vec2);
	std::cout << std::endl;
	//copy if the element is even
	vec1 = { 1,2,3,4,5,6,7,8,9,10 };
	vec2 = { 10,20 };
	display(vec1);
	display(vec2);
	std::cout << std::endl;
	std::copy_if(vec1.begin(), vec1.end(), std::back_inserter(vec2),
		[](int x) {return x % 2 == 0; }); //copied even numbers into vec2 inserting them at the back
	display(vec1);
	display(vec2);
	vec1 = { 1,2,3,4,5,6,7,8,9,10 };
	vec2 = { 10,20 };
	std::copy_if(vec1.begin(), vec1.end(), std::back_inserter(vec2),
		[](int x) {return x % 2 != 0; });
	display(vec1);
	display(vec2);
	std::vector <std::string> vec3{ "Jenny", "Jen", "Elizabeth", "Gabriel" };
	std::vector <std::string> vec4{};
	display(vec3);
	display(vec4);
	std::copy_if(vec3.begin(), vec3.end(), std::back_inserter(vec4),
		[](std::string i) {return i.size() <= 3; });
	display(vec3);
	display(vec4);
}

void test10() {
	std::cout << "\nTest10=======================" << std::endl;
	//std::transform over two ranges
	std::vector<int> vec1{ 1,2,3,4,5 };
	std::vector<int> vec2{ 10,20,30,40,50 };
	std::vector<int> vec3;
	std::vector<int> vec4;
	display(vec1);
	display(vec2);
	std::cout << "Transform functions being called on vectors 1 & 2." << std::endl;
	//1*10,2*20,3*30,4*40,5*50 storing the results in vec3
	std::transform(vec1.begin(), vec1.end(), vec2.begin(),
		std::back_inserter(vec3),
		[](int x, int y) { return x * y; });
	display(vec3);
	std::transform(vec1.begin(), vec1.end(), vec2.begin(),
		std::back_inserter(vec4),
		[](int x, int y) {return (x + y) * (x + y); });
	display(vec4);
}

void test11() {
	std::cout << "\nTest11=======================" << std::endl;
	std::vector<int> vec1{ 1,2,3,4,5,6,7,8,9,10 };
	std::vector<int> vec2{ 100,200,300,400 };
	display(vec1);
	display(vec2);
	std::cout << std::endl;
	int select1{};
	std::cout << "Number to insert from Vector 1 to Vector 2: ";
	std::cin >> select1;
	auto it = std::find(vec1.begin(), vec1.end(), select1);
	if (it != vec1.end()) {
		std::cout << "Inserting..." << std::endl;
		vec2.push_back(select1);
	}
	else {
		std::cout << "Sorry " << select1 << " is not found in Vector 1." << std::endl;
	}
	display(vec1);
	display(vec2);
}

int main() 
{
test1();
test2();
test3();
test4();
test5();
test6();
test7();
tets8();
test9();
test10();
test11();
return 0;
}
